// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        BigInt  @id @default(autoincrement())
  profileId BigInt?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username         String
  name             String?
  password         String?
  jwtValidFrom     DateTime     @default(now()) // support revoke token
  confirmationHash String?
  provider         UserProvider // username, email, apple, google...
  profile          Profile?     @relation(fields: [profileId], references: [id])
  lastLoginAt      DateTime?
  blocked          Boolean      @default(false)
  confirmed        Boolean      @default(false)
  role             Role         @default(USER)

  verifyCode      String?   @unique
  verifyCodeCount Int       @default(0)
  verifyCreatedAt DateTime?

  // relations
  @@unique([username, provider])
}

enum UserProvider {
  USERNAME
  LOCAL // email
  google
  apple
  facebook
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

model Profile {
  id BigInt @id @default(autoincrement())

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  dob       DateTime?

  name   String
  avatar String?
  email  String?

  // relations
  users User[]
  todos Todo[]
}

enum TodoStatus {
  TODO
  IN_PROGRESS
  DONE
}

model Todo {
  id BigInt @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String?
  status      TodoStatus @default(TODO)

  profileId BigInt
  profile   Profile @relation(fields: [profileId], references: [id])
}

model BotWallet {
  address String @id

  privateKey String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tokenWallets BotTokenWallet[]
}

model BotTokenWallet {
  walletAddress String
  tokenAddress  String

  buyable  Boolean
  sellable Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  wallet BotWallet @relation(fields: [walletAddress], references: [address])
  token  BotToken  @relation(fields: [tokenAddress], references: [address])

  @@unique([walletAddress, tokenAddress])
}

model BotToken {
  address String @id

  enabled        Boolean @default(true)
  scannedToBlock Int   @default(0)

  chainId String
  fee     Int @default(500)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  swaps        TokenSwap[]
  tokenWallets BotTokenWallet[]
}

model TokenSwap {
  txHash String
  index  Int

  jobId String?

  isBuy        Boolean
  tokenAddress String
  blockNumber  Int

  tokenAmount Decimal @db.Decimal(30, 0)
  ethAmount   Decimal @db.Decimal(30, 0)

  sender    String
  recipient String
  amount0      Decimal @db.Decimal(30, 0)
  amount1      Decimal @db.Decimal(30, 0)
  sqrtPriceX96 String
  liquidity    Decimal @db.Decimal(30, 0)
  tick         Int

  token BotToken @relation(fields: [tokenAddress], references: [address])

  @@unique([txHash, index])
}

// model Strategy {
//   id BigInt @id @default(autoincrement())

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   name String
//   description String?

//   tokens BotToken[]
// }

// enum VolumeType {
//   ALL
//   DAY
//   HOUR
// }

// model Volume {
//   tokenAddress String
//   type VolumeType
//   amount Decimal @db.Decimal(30, 0)
//   timestamp Int
// }
