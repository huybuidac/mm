/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IV3SwapRouter {
  export type ExactInputParamsStruct = {
    path: BytesLike;
    recipient: AddressLike;
    amountIn: BigNumberish;
    amountOutMinimum: BigNumberish;
  };

  export type ExactInputParamsStructOutput = [
    path: string,
    recipient: string,
    amountIn: bigint,
    amountOutMinimum: bigint
  ] & {
    path: string;
    recipient: string;
    amountIn: bigint;
    amountOutMinimum: bigint;
  };

  export type ExactInputSingleParamsStruct = {
    tokenIn: AddressLike;
    tokenOut: AddressLike;
    fee: BigNumberish;
    recipient: AddressLike;
    amountIn: BigNumberish;
    amountOutMinimum: BigNumberish;
    sqrtPriceLimitX96: BigNumberish;
  };

  export type ExactInputSingleParamsStructOutput = [
    tokenIn: string,
    tokenOut: string,
    fee: bigint,
    recipient: string,
    amountIn: bigint,
    amountOutMinimum: bigint,
    sqrtPriceLimitX96: bigint
  ] & {
    tokenIn: string;
    tokenOut: string;
    fee: bigint;
    recipient: string;
    amountIn: bigint;
    amountOutMinimum: bigint;
    sqrtPriceLimitX96: bigint;
  };

  export type ExactOutputParamsStruct = {
    path: BytesLike;
    recipient: AddressLike;
    amountOut: BigNumberish;
    amountInMaximum: BigNumberish;
  };

  export type ExactOutputParamsStructOutput = [
    path: string,
    recipient: string,
    amountOut: bigint,
    amountInMaximum: bigint
  ] & {
    path: string;
    recipient: string;
    amountOut: bigint;
    amountInMaximum: bigint;
  };

  export type ExactOutputSingleParamsStruct = {
    tokenIn: AddressLike;
    tokenOut: AddressLike;
    fee: BigNumberish;
    recipient: AddressLike;
    amountOut: BigNumberish;
    amountInMaximum: BigNumberish;
    sqrtPriceLimitX96: BigNumberish;
  };

  export type ExactOutputSingleParamsStructOutput = [
    tokenIn: string,
    tokenOut: string,
    fee: bigint,
    recipient: string,
    amountOut: bigint,
    amountInMaximum: bigint,
    sqrtPriceLimitX96: bigint
  ] & {
    tokenIn: string;
    tokenOut: string;
    fee: bigint;
    recipient: string;
    amountOut: bigint;
    amountInMaximum: bigint;
    sqrtPriceLimitX96: bigint;
  };
}

export declare namespace IApproveAndCall {
  export type IncreaseLiquidityParamsStruct = {
    token0: AddressLike;
    token1: AddressLike;
    tokenId: BigNumberish;
    amount0Min: BigNumberish;
    amount1Min: BigNumberish;
  };

  export type IncreaseLiquidityParamsStructOutput = [
    token0: string,
    token1: string,
    tokenId: bigint,
    amount0Min: bigint,
    amount1Min: bigint
  ] & {
    token0: string;
    token1: string;
    tokenId: bigint;
    amount0Min: bigint;
    amount1Min: bigint;
  };

  export type MintParamsStruct = {
    token0: AddressLike;
    token1: AddressLike;
    fee: BigNumberish;
    tickLower: BigNumberish;
    tickUpper: BigNumberish;
    amount0Min: BigNumberish;
    amount1Min: BigNumberish;
    recipient: AddressLike;
  };

  export type MintParamsStructOutput = [
    token0: string,
    token1: string,
    fee: bigint,
    tickLower: bigint,
    tickUpper: bigint,
    amount0Min: bigint,
    amount1Min: bigint,
    recipient: string
  ] & {
    token0: string;
    token1: string;
    fee: bigint;
    tickLower: bigint;
    tickUpper: bigint;
    amount0Min: bigint;
    amount1Min: bigint;
    recipient: string;
  };
}

export interface Routerv2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "WETH9"
      | "approveMax"
      | "approveMaxMinusOne"
      | "approveZeroThenMax"
      | "approveZeroThenMaxMinusOne"
      | "callPositionManager"
      | "checkOracleSlippage(bytes[],uint128[],uint24,uint32)"
      | "checkOracleSlippage(bytes,uint24,uint32)"
      | "exactInput"
      | "exactInputSingle"
      | "exactOutput"
      | "exactOutputSingle"
      | "factory"
      | "factoryV2"
      | "getApprovalType"
      | "increaseLiquidity"
      | "mint"
      | "multicall(bytes32,bytes[])"
      | "multicall(uint256,bytes[])"
      | "multicall(bytes[])"
      | "positionManager"
      | "pull"
      | "refundETH"
      | "selfPermit"
      | "selfPermitAllowed"
      | "selfPermitAllowedIfNecessary"
      | "selfPermitIfNecessary"
      | "swapExactTokensForTokens"
      | "swapTokensForExactTokens"
      | "sweepToken(address,uint256,address)"
      | "sweepToken(address,uint256)"
      | "sweepTokenWithFee(address,uint256,uint256,address)"
      | "sweepTokenWithFee(address,uint256,address,uint256,address)"
      | "uniswapV3SwapCallback"
      | "unwrapWETH9(uint256,address)"
      | "unwrapWETH9(uint256)"
      | "unwrapWETH9WithFee(uint256,address,uint256,address)"
      | "unwrapWETH9WithFee(uint256,uint256,address)"
      | "wrapETH"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "WETH9", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approveMax",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approveMaxMinusOne",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approveZeroThenMax",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approveZeroThenMaxMinusOne",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "callPositionManager",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkOracleSlippage(bytes[],uint128[],uint24,uint32)",
    values: [BytesLike[], BigNumberish[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkOracleSlippage(bytes,uint24,uint32)",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exactInput",
    values: [IV3SwapRouter.ExactInputParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "exactInputSingle",
    values: [IV3SwapRouter.ExactInputSingleParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "exactOutput",
    values: [IV3SwapRouter.ExactOutputParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "exactOutputSingle",
    values: [IV3SwapRouter.ExactOutputSingleParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "factoryV2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getApprovalType",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLiquidity",
    values: [IApproveAndCall.IncreaseLiquidityParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [IApproveAndCall.MintParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall(bytes32,bytes[])",
    values: [BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall(uint256,bytes[])",
    values: [BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall(bytes[])",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "positionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pull",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "refundETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "selfPermit",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "selfPermitAllowed",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "selfPermitAllowedIfNecessary",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "selfPermitIfNecessary",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForTokens",
    values: [BigNumberish, BigNumberish, AddressLike[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactTokens",
    values: [BigNumberish, BigNumberish, AddressLike[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sweepToken(address,uint256,address)",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sweepToken(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sweepTokenWithFee(address,uint256,uint256,address)",
    values: [AddressLike, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sweepTokenWithFee(address,uint256,address,uint256,address)",
    values: [AddressLike, BigNumberish, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3SwapCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unwrapWETH9(uint256,address)",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unwrapWETH9(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unwrapWETH9WithFee(uint256,address,uint256,address)",
    values: [BigNumberish, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unwrapWETH9WithFee(uint256,uint256,address)",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "wrapETH",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "WETH9", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approveMax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveMaxMinusOne",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveZeroThenMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveZeroThenMaxMinusOne",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callPositionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkOracleSlippage(bytes[],uint128[],uint24,uint32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkOracleSlippage(bytes,uint24,uint32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exactInput", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exactInputSingle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exactOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exactOutputSingle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factoryV2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApprovalType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "multicall(bytes32,bytes[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multicall(uint256,bytes[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multicall(bytes[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pull", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refundETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "selfPermit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "selfPermitAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selfPermitAllowedIfNecessary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selfPermitIfNecessary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sweepToken(address,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sweepToken(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sweepTokenWithFee(address,uint256,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sweepTokenWithFee(address,uint256,address,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3SwapCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unwrapWETH9(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unwrapWETH9(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unwrapWETH9WithFee(uint256,address,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unwrapWETH9WithFee(uint256,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wrapETH", data: BytesLike): Result;
}

export interface Routerv2 extends BaseContract {
  connect(runner?: ContractRunner | null): Routerv2;
  waitForDeployment(): Promise<this>;

  interface: Routerv2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  WETH9: TypedContractMethod<[], [string], "view">;

  approveMax: TypedContractMethod<[token: AddressLike], [void], "payable">;

  approveMaxMinusOne: TypedContractMethod<
    [token: AddressLike],
    [void],
    "payable"
  >;

  approveZeroThenMax: TypedContractMethod<
    [token: AddressLike],
    [void],
    "payable"
  >;

  approveZeroThenMaxMinusOne: TypedContractMethod<
    [token: AddressLike],
    [void],
    "payable"
  >;

  callPositionManager: TypedContractMethod<
    [data: BytesLike],
    [string],
    "payable"
  >;

  "checkOracleSlippage(bytes[],uint128[],uint24,uint32)": TypedContractMethod<
    [
      paths: BytesLike[],
      amounts: BigNumberish[],
      maximumTickDivergence: BigNumberish,
      secondsAgo: BigNumberish
    ],
    [void],
    "view"
  >;

  "checkOracleSlippage(bytes,uint24,uint32)": TypedContractMethod<
    [
      path: BytesLike,
      maximumTickDivergence: BigNumberish,
      secondsAgo: BigNumberish
    ],
    [void],
    "view"
  >;

  exactInput: TypedContractMethod<
    [params: IV3SwapRouter.ExactInputParamsStruct],
    [bigint],
    "payable"
  >;

  exactInputSingle: TypedContractMethod<
    [params: IV3SwapRouter.ExactInputSingleParamsStruct],
    [bigint],
    "payable"
  >;

  exactOutput: TypedContractMethod<
    [params: IV3SwapRouter.ExactOutputParamsStruct],
    [bigint],
    "payable"
  >;

  exactOutputSingle: TypedContractMethod<
    [params: IV3SwapRouter.ExactOutputSingleParamsStruct],
    [bigint],
    "payable"
  >;

  factory: TypedContractMethod<[], [string], "view">;

  factoryV2: TypedContractMethod<[], [string], "view">;

  getApprovalType: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  increaseLiquidity: TypedContractMethod<
    [params: IApproveAndCall.IncreaseLiquidityParamsStruct],
    [string],
    "payable"
  >;

  mint: TypedContractMethod<
    [params: IApproveAndCall.MintParamsStruct],
    [string],
    "payable"
  >;

  "multicall(bytes32,bytes[])": TypedContractMethod<
    [previousBlockhash: BytesLike, data: BytesLike[]],
    [string[]],
    "payable"
  >;

  "multicall(uint256,bytes[])": TypedContractMethod<
    [deadline: BigNumberish, data: BytesLike[]],
    [string[]],
    "payable"
  >;

  "multicall(bytes[])": TypedContractMethod<
    [data: BytesLike[]],
    [string[]],
    "payable"
  >;

  positionManager: TypedContractMethod<[], [string], "view">;

  pull: TypedContractMethod<
    [token: AddressLike, value: BigNumberish],
    [void],
    "payable"
  >;

  refundETH: TypedContractMethod<[], [void], "payable">;

  selfPermit: TypedContractMethod<
    [
      token: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "payable"
  >;

  selfPermitAllowed: TypedContractMethod<
    [
      token: AddressLike,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "payable"
  >;

  selfPermitAllowedIfNecessary: TypedContractMethod<
    [
      token: AddressLike,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "payable"
  >;

  selfPermitIfNecessary: TypedContractMethod<
    [
      token: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "payable"
  >;

  swapExactTokensForTokens: TypedContractMethod<
    [
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: AddressLike[],
      to: AddressLike
    ],
    [bigint],
    "payable"
  >;

  swapTokensForExactTokens: TypedContractMethod<
    [
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: AddressLike[],
      to: AddressLike
    ],
    [bigint],
    "payable"
  >;

  "sweepToken(address,uint256,address)": TypedContractMethod<
    [token: AddressLike, amountMinimum: BigNumberish, recipient: AddressLike],
    [void],
    "payable"
  >;

  "sweepToken(address,uint256)": TypedContractMethod<
    [token: AddressLike, amountMinimum: BigNumberish],
    [void],
    "payable"
  >;

  "sweepTokenWithFee(address,uint256,uint256,address)": TypedContractMethod<
    [
      token: AddressLike,
      amountMinimum: BigNumberish,
      feeBips: BigNumberish,
      feeRecipient: AddressLike
    ],
    [void],
    "payable"
  >;

  "sweepTokenWithFee(address,uint256,address,uint256,address)": TypedContractMethod<
    [
      token: AddressLike,
      amountMinimum: BigNumberish,
      recipient: AddressLike,
      feeBips: BigNumberish,
      feeRecipient: AddressLike
    ],
    [void],
    "payable"
  >;

  uniswapV3SwapCallback: TypedContractMethod<
    [amount0Delta: BigNumberish, amount1Delta: BigNumberish, _data: BytesLike],
    [void],
    "nonpayable"
  >;

  "unwrapWETH9(uint256,address)": TypedContractMethod<
    [amountMinimum: BigNumberish, recipient: AddressLike],
    [void],
    "payable"
  >;

  "unwrapWETH9(uint256)": TypedContractMethod<
    [amountMinimum: BigNumberish],
    [void],
    "payable"
  >;

  "unwrapWETH9WithFee(uint256,address,uint256,address)": TypedContractMethod<
    [
      amountMinimum: BigNumberish,
      recipient: AddressLike,
      feeBips: BigNumberish,
      feeRecipient: AddressLike
    ],
    [void],
    "payable"
  >;

  "unwrapWETH9WithFee(uint256,uint256,address)": TypedContractMethod<
    [
      amountMinimum: BigNumberish,
      feeBips: BigNumberish,
      feeRecipient: AddressLike
    ],
    [void],
    "payable"
  >;

  wrapETH: TypedContractMethod<[value: BigNumberish], [void], "payable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "WETH9"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "approveMax"
  ): TypedContractMethod<[token: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "approveMaxMinusOne"
  ): TypedContractMethod<[token: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "approveZeroThenMax"
  ): TypedContractMethod<[token: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "approveZeroThenMaxMinusOne"
  ): TypedContractMethod<[token: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "callPositionManager"
  ): TypedContractMethod<[data: BytesLike], [string], "payable">;
  getFunction(
    nameOrSignature: "checkOracleSlippage(bytes[],uint128[],uint24,uint32)"
  ): TypedContractMethod<
    [
      paths: BytesLike[],
      amounts: BigNumberish[],
      maximumTickDivergence: BigNumberish,
      secondsAgo: BigNumberish
    ],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkOracleSlippage(bytes,uint24,uint32)"
  ): TypedContractMethod<
    [
      path: BytesLike,
      maximumTickDivergence: BigNumberish,
      secondsAgo: BigNumberish
    ],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "exactInput"
  ): TypedContractMethod<
    [params: IV3SwapRouter.ExactInputParamsStruct],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "exactInputSingle"
  ): TypedContractMethod<
    [params: IV3SwapRouter.ExactInputSingleParamsStruct],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "exactOutput"
  ): TypedContractMethod<
    [params: IV3SwapRouter.ExactOutputParamsStruct],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "exactOutputSingle"
  ): TypedContractMethod<
    [params: IV3SwapRouter.ExactOutputSingleParamsStruct],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "factoryV2"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getApprovalType"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "increaseLiquidity"
  ): TypedContractMethod<
    [params: IApproveAndCall.IncreaseLiquidityParamsStruct],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [params: IApproveAndCall.MintParamsStruct],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "multicall(bytes32,bytes[])"
  ): TypedContractMethod<
    [previousBlockhash: BytesLike, data: BytesLike[]],
    [string[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "multicall(uint256,bytes[])"
  ): TypedContractMethod<
    [deadline: BigNumberish, data: BytesLike[]],
    [string[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "multicall(bytes[])"
  ): TypedContractMethod<[data: BytesLike[]], [string[]], "payable">;
  getFunction(
    nameOrSignature: "positionManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pull"
  ): TypedContractMethod<
    [token: AddressLike, value: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "refundETH"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "selfPermit"
  ): TypedContractMethod<
    [
      token: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "selfPermitAllowed"
  ): TypedContractMethod<
    [
      token: AddressLike,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "selfPermitAllowedIfNecessary"
  ): TypedContractMethod<
    [
      token: AddressLike,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "selfPermitIfNecessary"
  ): TypedContractMethod<
    [
      token: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "swapExactTokensForTokens"
  ): TypedContractMethod<
    [
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: AddressLike[],
      to: AddressLike
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "swapTokensForExactTokens"
  ): TypedContractMethod<
    [
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: AddressLike[],
      to: AddressLike
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sweepToken(address,uint256,address)"
  ): TypedContractMethod<
    [token: AddressLike, amountMinimum: BigNumberish, recipient: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sweepToken(address,uint256)"
  ): TypedContractMethod<
    [token: AddressLike, amountMinimum: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sweepTokenWithFee(address,uint256,uint256,address)"
  ): TypedContractMethod<
    [
      token: AddressLike,
      amountMinimum: BigNumberish,
      feeBips: BigNumberish,
      feeRecipient: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sweepTokenWithFee(address,uint256,address,uint256,address)"
  ): TypedContractMethod<
    [
      token: AddressLike,
      amountMinimum: BigNumberish,
      recipient: AddressLike,
      feeBips: BigNumberish,
      feeRecipient: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "uniswapV3SwapCallback"
  ): TypedContractMethod<
    [amount0Delta: BigNumberish, amount1Delta: BigNumberish, _data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unwrapWETH9(uint256,address)"
  ): TypedContractMethod<
    [amountMinimum: BigNumberish, recipient: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "unwrapWETH9(uint256)"
  ): TypedContractMethod<[amountMinimum: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "unwrapWETH9WithFee(uint256,address,uint256,address)"
  ): TypedContractMethod<
    [
      amountMinimum: BigNumberish,
      recipient: AddressLike,
      feeBips: BigNumberish,
      feeRecipient: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "unwrapWETH9WithFee(uint256,uint256,address)"
  ): TypedContractMethod<
    [
      amountMinimum: BigNumberish,
      feeBips: BigNumberish,
      feeRecipient: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "wrapETH"
  ): TypedContractMethod<[value: BigNumberish], [void], "payable">;

  filters: {};
}
